{"version":3,"file":"component---src-templates-post-template-tsx-e9a1ca64dd809071e3e9.js","mappings":"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","sources":["webpack://yrnana.github.io/./src/components/common/GoogleAdsense.tsx","webpack://yrnana.github.io/./src/components/post/Comments.tsx","webpack://yrnana.github.io/./src/components/post/Post.tsx","webpack://yrnana.github.io/./src/components/post/PostNav.tsx","webpack://yrnana.github.io/./src/templates/PostTemplate.tsx"],"sourcesContent":["import { useEffect } from 'react';\n\ntype GoogleAdsenseProps = {\n  slot: string;\n  client?: string;\n  format?: string;\n};\n\nconst GoogleAdsense = ({\n  slot,\n  client = 'ca-pub-4675264961434940',\n  format = 'auto',\n}: GoogleAdsenseProps) => {\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      (window.adsbygoogle || []).push({});\n    }\n  }, []);\n\n  return (\n    <ins\n      className=\"adsbygoogle\"\n      style={{ display: 'block' }}\n      data-ad-client={client}\n      data-ad-slot={slot}\n      data-ad-format={format}\n      data-full-width-responsive=\"true\"\n    />\n  );\n};\n\nexport default GoogleAdsense;\n","import { useEffect, useRef } from 'react';\n\nconst Comments: React.VFC<{ id: string }> = ({ id }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (container) {\n      // add utteranc comment\n      const script = document.createElement('script');\n      script.setAttribute('src', 'https://utteranc.es/client.js');\n      script.setAttribute('repo', 'yrnana/yrnana.github.io');\n      script.setAttribute('issue-term', id);\n      script.setAttribute('label', 'comment');\n      script.setAttribute('theme', 'github-light');\n      script.setAttribute('crossorigin', 'anonymous');\n      script.setAttribute('async', 'true');\n      container.appendChild(script);\n      return () => {\n        container.innerHTML = '';\n      };\n    }\n  }, [id]);\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"mt-20 relative\"\n      style={{ minHeight: 269 }}\n    />\n  );\n};\n\nComments.displayName = 'Comments';\n\nexport default Comments;\n","import { graphql } from 'gatsby';\nimport { GatsbyImage, getImage, ImageDataLike } from 'gatsby-plugin-image';\nimport Tag from '~/components/tag/Tag';\nimport { formatDate, renderAst } from '~/helpers/utils';\n\nconst Post: React.VFC<PostItemFragment> = ({ frontmatter, htmlAst }) => {\n  const { title, date, preview, tags } = frontmatter!;\n\n  return (\n    <article className=\"mb-20\">\n      <header className=\"text-center mt-10 mb-20\">\n        {preview && (\n          <GatsbyImage\n            image={getImage(preview as ImageDataLike)!}\n            alt={title}\n            className=\"mb-10\"\n          />\n        )}\n        <h1 className=\"text-3xl font-semibold\">{title}</h1>\n        <div className=\"text-slate-500 mt-4\">{formatDate(date)}</div>\n        {tags && (\n          <div className=\"flex flex-row flex-wrap justify-center space-x-3 mt-4\">\n            {tags.map((tag) => (\n              <Tag key={tag} name={tag} color=\"violet\" />\n            ))}\n          </div>\n        )}\n      </header>\n      <div className=\"markdown\">{renderAst(htmlAst)}</div>\n    </article>\n  );\n};\n\nexport default Post;\n\nexport const postItemFragment = graphql`\n  fragment PostItem on MarkdownRemark {\n    htmlAst\n    excerpt(pruneLength: 150, truncate: true)\n    frontmatter {\n      title\n      date\n      tags\n      excerpt\n      preview {\n        childImageSharp {\n          gatsbyImageData(layout: CONSTRAINED, placeholder: BLURRED)\n        }\n      }\n    }\n  }\n`;\n","import { Link } from 'gatsby';\n\ntype PostEdgeFragment = {\n  slug: string;\n  frontmatter: {\n    title: string;\n  };\n} | null;\n\nexport interface PostNavProps {\n  previous: PostEdgeFragment; // 이전글\n  next: PostEdgeFragment; // 다음글\n}\n\nconst PostNav: React.VFC<PostNavProps> = ({ previous, next }) => {\n  if (!previous && !next) return null;\n\n  return (\n    <div className=\"flex mt-10 -mb-10\">\n      <div className=\"max-w-2/5\">\n        {previous && (\n          <Link\n            to={previous.slug}\n            className=\"hover:text-violet-700 flex items-center\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-6 w-6 text-slate-400 mr-1 flex-shrink-0\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M15 19l-7-7 7-7\"\n              />\n            </svg>\n            <div>\n              <div className=\"text-xs text-slate-500\">Previous</div>\n              <div>{previous.frontmatter.title}</div>\n            </div>\n          </Link>\n        )}\n      </div>\n      <div className=\"max-w-2/5 text-right ml-auto\">\n        {next && (\n          <Link\n            to={next.slug}\n            className=\"hover:text-violet-700 flex items-center\"\n          >\n            <div>\n              <div className=\"text-xs text-slate-500\">Next</div>\n              <div>{next.frontmatter.title}</div>\n            </div>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-6 w-6 text-slate-400 ml-1 flex-shrink-0\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M9 5l7 7-7 7\"\n              />\n            </svg>\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PostNav;\n","import { graphql, PageProps } from 'gatsby';\nimport { getSrc, ImageDataLike } from 'gatsby-plugin-image';\nimport GoogleAdsense from '~/components/common/GoogleAdsense';\nimport Seo from '~/components/common/Seo';\nimport Layout from '~/components/layout/Layout';\nimport Comments from '~/components/post/Comments';\nimport Post from '~/components/post/Post';\nimport PostNav, { PostNavProps } from '~/components/post/PostNav';\n\ninterface PostPageContext extends PostNavProps {\n  id: string;\n}\n\nconst PostTemplate: React.VFC<PageProps<PostQuery, PostPageContext>> = ({\n  data,\n  pageContext,\n}) => {\n  const post = data.markdownRemark!;\n  const { previous, next, id } = pageContext;\n  const { title, excerpt, preview, tags } = post.frontmatter!;\n\n  return (\n    <Layout>\n      <Seo\n        title={title}\n        description={excerpt || post.excerpt!}\n        image={preview ? getSrc(preview as ImageDataLike) : undefined}\n        keywords={tags?.join(',')}\n        type=\"article\"\n        isBlogTitleDisabled\n      />\n      <Post {...post} />\n      <GoogleAdsense slot=\"4448901342\" />\n      <PostNav previous={previous} next={next} />\n      <Comments id={id} />\n    </Layout>\n  );\n};\n\nexport default PostTemplate;\n\nexport const query = graphql`\n  query Post($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      ...PostItem\n    }\n  }\n`;\n"],"names":["slot","client","format","useEffect","window","adsbygoogle","push","_jsx","className","style","display","Comments","id","containerRef","useRef","container","current","script","document","createElement","setAttribute","appendChild","innerHTML","ref","minHeight","displayName","frontmatter","htmlAst","title","date","preview","tags","_jsxs","GatsbyImage","image","getImage","alt","formatDate","map","tag","Tag","name","color","renderAst","previous","next","Link","to","slug","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","data","pageContext","post","markdownRemark","excerpt","Layout","Seo","description","getSrc","undefined","keywords","join","type","isBlogTitleDisabled","Post","GoogleAdsense","PostNav"],"sourceRoot":""}