---
import './SearchInput.css';

import { SearchIconSvg } from '~/assets';
---

<section class="max-w-3xl mx-auto">
  <div class="flex items-center">
    <label for="searchBox" class="sr-only">Search</label>
    <div class="relative w-full">
      <div class="svg-wrap">
        <Fragment set:html={SearchIconSvg} />
      </div>
      <input type="text" id="search-input" placeholder="Search..." required />
    </div>
  </div>

  <!-- Search Results -->
  <div id="search-results"></div>
</section>

<!-- Search JS -->
<script>
  import Mark from 'mark.js';

  import Document from './module/document.js';
  import cjk from './module/lang/cjk/default.js';
  import lang from './module/lang/en.js';
  import charset from './module/lang/latin/advanced.js';

  const fsDocument = {
    id: 'slug',
    index: ['title', 'body'],
    store: ['title', 'body'],
  };

  const enIndex = new Document({
    preset: 'performance',
    charset: charset,
    lang: lang,
    document: fsDocument,
  });

  const koIndex = new Document({
    preset: 'performance',
    document: fsDocument,
    ...cjk,
  });

  type Doc = {
    slug: string;
    title: string;
    body: string;
  };

  const response = await fetch('/search-index.json');
  const data: Doc[] = await response.json();

  data.forEach((doc) => {
    enIndex.add(doc);
    koIndex.add(doc);
  });

  const inputEl = document.getElementById('search-input') as HTMLInputElement;
  const listEl = document.getElementById('search-results') as HTMLDivElement;

  const instance = new Mark(listEl);

  inputEl.focus();

  inputEl.addEventListener('keyup', (event) => {
    if (!(event.currentTarget instanceof HTMLInputElement)) return;

    const query = event.currentTarget.value;

    if (query.length < 2) {
      listEl.style.display = 'none';
      return;
    }

    renderList(query);
    listEl.style.display = 'block';
  });

  type Data = {
    field: 'title' | 'body';
    result: {
      id: string;
      doc: Omit<Doc, 'slug'>;
    }[];
  };

  function renderList(query: string) {
    const results: Data[] = search(query);

    // clear
    listEl.innerHTML = '';

    // show message when results is empty
    if (!results.length) {
      const resultPage = document.createElement('div');
      resultPage.className = 'search-result-page';
      resultPage.innerHTML = '검색 결과가 없습니다.';
      listEl.append(resultPage);
      return;
    }

    results.forEach(({ field, result }) => {
      result.forEach(({ id: slug, doc }) => {
        let position = 0;

        if (field === 'body') {
          const pos = doc.body.indexOf(query);
          position = Math.max(pos, 0);
        }

        const resultPage = document.createElement('div');
        resultPage.className = 'search-result-page';

        const resultTitle = document.createElement('a');
        resultTitle.className = 'search-result-title';
        resultTitle.href = `/post/${slug}`;
        resultTitle.innerHTML = doc.title;
        resultPage.append(resultTitle);

        const resultBody = document.createElement('div');
        resultBody.className = 'search-result-body';
        resultBody.innerHTML = doc.body.substring(position, position + 100);
        resultPage.append(resultBody);

        listEl.append(resultPage);
      });
    });

    // marking
    instance.mark(query);
  }

  const isAlphanumeric = (str: string) => /^[a-zA-Z0-9]+$/.test(str);

  function search(query: string) {
    return (isAlphanumeric(query) ? enIndex : koIndex).search(query, {
      limit: 10,
      enrich: true,
    });
  }
</script>
