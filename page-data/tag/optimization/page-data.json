{
    "componentChunkName": "component---src-templates-post-list-by-tag-template-tsx",
    "path": "/tag/optimization",
    "result": {"data":{"allMdx":{"nodes":[{"slug":"2021-10-25-when-should-you-not-use-react.memo","excerpt":"당연하지만 얕은비교연산 `===`가 어지간하면 리렌더링보다는 비용이 적게 들긴 한다. 그렇다면 왜 리액트는 `React.memo`나 `React.PureComponent`를 기본형으로 갖지 않을까?","frontmatter":{"title":"Q. When should you NOT use React.memo?","date":"2021-10-25T07:30:46+09:00","excerpt":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uB2F9\\uC5F0\\uD558\\uC9C0\\uB9CC \\uC595\\uC740\\uBE44\\uAD50\\uC5F0\\uC0B0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"===\"), \"\\uAC00 \\uC5B4\\uC9C0\\uAC04\\uD558\\uBA74 \\uB9AC\\uB80C\\uB354\\uB9C1\\uBCF4\\uB2E4\\uB294 \\uBE44\\uC6A9\\uC774 \\uC801\\uAC8C \\uB4E4\\uAE34 \\uD55C\\uB2E4. \\uADF8\\uB807\\uB2E4\\uBA74 \\uC65C \\uB9AC\\uC561\\uD2B8\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.memo\"), \"\\uB098 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.PureComponent\"), \"\\uB97C \\uAE30\\uBCF8\\uD615\\uC73C\\uB85C \\uAC16\\uC9C0 \\uC54A\\uC744\\uAE4C?\"));\n}\n;\nMDXContent.isMDXComponent = true;","tags":["React","Optimization"]}},{"slug":"2021-03-09","excerpt":"주요 metrics(지표) 항목 ⭐️ 표시는  Web Vital 에서 중점적으로 체크하는 항목이다. LCP  : 로딩 성능 FID  : 상호 작용력 CLS  : 시각적 안정성 TTFB (Time To First Byte) 페이지를 요청했을 때 서버에서 데이터의 첫 번째…","frontmatter":{"title":"웹사이트 성능 메트릭","date":"2021-03-09T00:14:35+09:00","excerpt":null,"tags":["Performance","Optimization","Metrics"]}},{"slug":"2021-03-08","excerpt":"브라우저 아키텍처 \n브라우저 엔진 : 유저 인터페이스와 렌더링 엔진 사이의 중개자로, 유저 인터페이스에서 받은 입력에 따라 렌더링 엔진을 쿼리하고 처리한다.\n렌더링 엔진 : HTML/CSS를 파싱해서 사용자가 요청한 특정 웹 페이지를 화면에 렌더링하는 역할을 한다. …","frontmatter":{"title":"브라우저 렌더링에 대한 이해와 최적화","date":"2021-03-08T02:08:38+09:00","excerpt":null,"tags":["Browser","Optimization"]}}]}},"pageContext":{"tag":"Optimization"}},
    "staticQueryHashes": ["1957264973","5457840"]}