{
    "componentChunkName": "component---src-templates-post-list-by-tag-template-tsx",
    "path": "/tag/web-api",
    "result": {"data":{"allMarkdownRemark":{"nodes":[{"slug":"/post/2021-03-14-screen-capture-api","excerpt":"Screen Capture API를 통해 화면 또는 화면의 일부를 선택하고 미디어 스트림으로 캡쳐할 수 있다. 화면을 캡쳐하는 API이므로 디바이스의 input을 캡쳐하는 WebRTC API와 구분이 필요하다. Screen Capture API 사용법 getDispl…","frontmatter":{"title":"Screen Capture API","date":"2021-03-14T02:52:32+09:00","tags":["Screen Capture API","Web API"],"excerptAst":null}},{"slug":"/post/2021-03-14-resize-observer-api","excerpt":"Resize Observer API는 요소의 크기 변화를 감지하고 콜백을 실행한다. 기존에는 Viewport 크기 변화는 window의 resize 이벤트 또는 window.matchMedia로 감지할 수 있지만 요소의 크기 변화를 직접적으로 감지할 수 있는 방법은 …","frontmatter":{"title":"Resize Observer API","date":"2021-03-14T01:32:43+09:00","tags":["Resize Observer API","Web API"],"excerptAst":null}},{"slug":"/post/2021-03-14-mutation-observer","excerpt":"MutationObserver는 DOM 변경 감시를 제공한다. DOM을 감시하다가 child 노드들이나 attributes, data 등이 변경되면 콜백을 실행한다. 예를 들면 prefers-color-scheme 미디어쿼리가 안 먹는 브라우저 에서 다크모드를 적용하…","frontmatter":{"title":"Mutation Observer","date":"2021-03-14T01:15:29+09:00","tags":["Mutation Observer","Web API"],"excerptAst":null}},{"slug":"/post/2021-03-14-intersection-observer-api","excerpt":"Intersection Observer API는 타겟 요소와 상위 요소 or 최상위 Document의 Viewport 사이의 교차점 내의 변화를 비동기적으로 관찰하는 방법이다. 페이지 스크롤에 의한 lazy loading, 무한 스크롤, 스크롤에 따라 강조되는 tab…","frontmatter":{"title":"Intersection Observer API","date":"2021-03-14T00:41:42+09:00","tags":["Web API","Intersection Observer API"],"excerptAst":null}}]}},"pageContext":{"tag":"Web API"}},
    "staticQueryHashes": ["1957264973","5457840"]}