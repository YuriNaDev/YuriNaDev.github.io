{
    "componentChunkName": "component---src-templates-post-list-by-tag-template-tsx",
    "path": "/tag/react",
    "result": {"data":{"allMarkdownRemark":{"nodes":[{"slug":"/post/2022-04-12-react-18","excerpt":"지난 3월말에 아기다리고기다리던 React v18이 출시되었다. 17.0.2에서 머물러있던 리액트가 마이너 업데이트 없이 메이저 업데이트를 진행했는데, 그동안 실험 기능으로 던져온 떡밥들을 해소하는 업데이트가 될 것 같다. 새로운 기능 Automatic Batchin…","frontmatter":{"title":"React 18 둘러보기","date":"2022-04-12T09:00:00+09:00","tags":["React","Suspense","useTransition","useDeferredValue"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useTransition"}]},{"type":"text","value":"와 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useDeferredValue"}]},{"type":"text","value":"를 언제 써야할까? "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Suspense"}]},{"type":"text","value":"와 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"startTransition"}]},{"type":"text","value":"을 어떻게 활용해야 할까?"}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-10-25-when-should-you-not-use-react.memo","excerpt":"얕은 비교와 리액트 성능 최적화 사내 FE모임 시간에 효율적인 스토리북 활용법에 대해 토론하다 \"스토리북의 Control 패널을 활용하려면 렌더링 최적화가 어렵다\" 라는 이야기를 하게 되었다. 그러다 인턴🤗분께서 PureComponent를 통한 얕은 비교로 렌더링 최…","frontmatter":{"title":"Q. When should you NOT use React.memo?","date":"2021-10-25T07:30:46+09:00","tags":["React","Optimization","React.memo"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"당연하지만 얕은비교연산 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"==="}]},{"type":"text","value":"가 어지간하면 리렌더링보다는 비용이 적게 들긴 한다. 그렇다면 왜 리액트는 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.memo"}]},{"type":"text","value":"나 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.PureComponent"}]},{"type":"text","value":"를 기본형으로 갖지 않을까?"}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-08-26-usememo","excerpt":"공식 설명에도 computeExpensiveValue라고 설명하고 있다. 즉 비싼 연산을 언급하는 것이다. 예를 들면 데이터 만개를 변경한다던가... a === b는 전혀 비싼 연산이 아니다! 이 경우, 메모하는 메모리 비용에다가 [a, b]로 들어간 디펜던시에서 리…","frontmatter":{"title":"간단한 연산에 useMemo 쓰지 말자","date":"2021-08-26T11:15:48+09:00","tags":["React","useMemo"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"공식 설명에도 computeExpensiveValue라고 설명하고 있다. 즉 비싼 연산을 언급하는 것이다. "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"a === b"}]},{"type":"text","value":"는 비싼 연산이 아니다!"}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-08-21-context-api-redux","excerpt":"전역(global) 상태관리 옛날옛적 호랑이 담배피던시절(?) 리액트의 러닝커브를 올리는 주범은 redux라고 해도 과언이 아닐 정도로 리덕스는 리액트를 개발하려면 react-router-dom과 함께 필수로 배워야 하는 서드파티 라이브러리였으며 보일러 플레이트 코드…","frontmatter":{"title":"Context API가 존재하지만 여전히 사람들이 redux와 전역 상태관리 라이브러리를 쓰는 이유","date":"2021-08-21T16:31:55+09:00","tags":["Jotai","React","Recoil","context API","Redux"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"context api는 글로벌 상태관리 라이브러리를 대체할 수 없고, 여전히 많은 리액트 개발자들이 redux, mobx 등을 사용하고 있다."}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-03-24-table-of-contents-using-intersection-observer-api","excerpt":"Table Of Contents는 목차를 의미하고, Intersection Observer API는 타겟요소가 상위요소(또는 viewport)와 Intersect 하는지 관찰하는 기능을 제공하는 Web API다. 구현해야 할 기능과 방법을 생각해보면 글에서 헤더(h1…","frontmatter":{"title":"Table Of Contents using Intersection Observer API","date":"2021-03-24T23:05:36+09:00","tags":["React","Table Of Contents","Intersection Observer API"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Table Of Contents는 목차를 의미하고, Intersection Observer API는 타겟요소가 상위요소(또는 viewport)와 Intersect 하는지 관찰하는 기능을 제공하는 Web API다."}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-02-13-framer-motion-react-motion-gesture","excerpt":"framer-motion는 리액트에서 애니메이션과 제스쳐를 쉽게 다룰 수 있도록 해주는 라이브러리다. animate props에 값을 세팅하면 CSS transitions를 자동생성하는 방법으로 애니메이션을 만들어주고, drag나 hover 등의 제스쳐를 지원해주기도…","frontmatter":{"title":"framer-motion : react를 위한 motion & gesture 라이브러리","date":"2021-02-13T02:14:33+09:00","tags":["React","Framer Motion"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"framer-motion는 리액트에서 애니메이션과 제스쳐를 쉽게 다룰 수 있도록 해주는 라이브러리다."}]}],"data":{"quirksMode":false}}}}]}},"pageContext":{"tag":"React"}},
    "staticQueryHashes": ["1957264973","5457840"]}