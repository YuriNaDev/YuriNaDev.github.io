{
    "componentChunkName": "component---src-templates-post-list-template-tsx",
    "path": "/",
    "result": {"data":{"allMdx":{"nodes":[{"slug":"2021-10-25-when-should-you-not-use-react.memo","excerpt":"당연하지만 얕은비교연산 `===`가 어지간하면 리렌더링보다는 비용이 적게 들긴 한다. 그렇다면 왜 리액트는 `React.memo`나 `React.PureComponent`를 기본형으로 갖지 않을까?","frontmatter":{"title":"Q. When should you NOT use React.memo?","date":"2021-10-25T07:30:46+09:00","tags":["React","Optimization"],"excerpt":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uB2F9\\uC5F0\\uD558\\uC9C0\\uB9CC \\uC595\\uC740\\uBE44\\uAD50\\uC5F0\\uC0B0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"===\"), \"\\uAC00 \\uC5B4\\uC9C0\\uAC04\\uD558\\uBA74 \\uB9AC\\uB80C\\uB354\\uB9C1\\uBCF4\\uB2E4\\uB294 \\uBE44\\uC6A9\\uC774 \\uC801\\uAC8C \\uB4E4\\uAE34 \\uD55C\\uB2E4. \\uADF8\\uB807\\uB2E4\\uBA74 \\uC65C \\uB9AC\\uC561\\uD2B8\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.memo\"), \"\\uB098 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.PureComponent\"), \"\\uB97C \\uAE30\\uBCF8\\uD615\\uC73C\\uB85C \\uAC16\\uC9C0 \\uC54A\\uC744\\uAE4C?\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"당연하지만 얕은비교연산 `===`가 어지간하면 리렌더링보다는 비용이 적게 들긴 한다. 그렇다면 왜 리액트는 `React.memo`나 `React.PureComponent`를 기본형으로 갖지 않을까?"}}},{"slug":"2021-09-02-eslint","excerpt":"ESLint를 이해하고 작성하는 방법","frontmatter":{"title":"ESLint 알고 쓰기","date":"2021-09-02T20:40:01+09:00","tags":["ESLint"],"excerpt":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"ESLint\\uB97C \\uC774\\uD574\\uD558\\uACE0 \\uC791\\uC131\\uD558\\uB294 \\uBC29\\uBC95\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"ESLint를 이해하고 작성하는 방법"}}},{"slug":"2021-08-29-redux-saga","excerpt":"redux-saga 의 단점 생소한 generator 함수 ES6의 generator & yield는 비동기처리를 위한 함수인데 솔직히 프론트엔드 직무가 떡상한 시점에서 이미 더 간단하게 사용할 수 있는 ES7 async / await 가 등장했기 때문에 다소 생소한…","frontmatter":{"title":"redux-saga를 추천하지 않는 이유","date":"2021-08-29T15:29:45+09:00","tags":["React Query","Redux","Redux Saga"],"excerpt":null}},{"slug":"2021-08-28-typescript-4.4","excerpt":"정말 좋은 기능들이 추가되어서 정리해본다.","frontmatter":{"title":"Typescript 4.4에 추가된 기능","date":"2021-08-28T14:31:28+09:00","tags":["Typescript"],"excerpt":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uC815\\uB9D0 \\uC88B\\uC740 \\uAE30\\uB2A5\\uB4E4\\uC774 \\uCD94\\uAC00\\uB418\\uC5B4\\uC11C \\uC815\\uB9AC\\uD574\\uBCF8\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"정말 좋은 기능들이 추가되어서 정리해본다."}}},{"slug":"2021-08-26-usememo","excerpt":"공식 설명에도 computeExpensiveValue라고 설명하고 있다. 즉 비싼 연산을 언급하는 것이다. `a === b`는 비싼 연산이 아니다!","frontmatter":{"title":"간단한 연산에 useMemo 쓰지 말자","date":"2021-08-26T11:15:48+09:00","tags":["useMemo"],"excerpt":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uACF5\\uC2DD \\uC124\\uBA85\\uC5D0\\uB3C4 computeExpensiveValue\\uB77C\\uACE0 \\uC124\\uBA85\\uD558\\uACE0 \\uC788\\uB2E4. \\uC989 \\uBE44\\uC2FC \\uC5F0\\uC0B0\\uC744 \\uC5B8\\uAE09\\uD558\\uB294 \\uAC83\\uC774\\uB2E4. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a === b\"), \"\\uB294 \\uBE44\\uC2FC \\uC5F0\\uC0B0\\uC774 \\uC544\\uB2C8\\uB2E4!\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"공식 설명에도 computeExpensiveValue라고 설명하고 있다. 즉 비싼 연산을 언급하는 것이다. `a === b`는 비싼 연산이 아니다!"}}},{"slug":"2021-08-21-react-query-redux","excerpt":"`react-query`는 전역 상태관리 라이브러리가 아니라 서버와 클라이언트 간의 비동기 작업을 쉽게 해주는 라이브러리다.","frontmatter":{"title":"react-query가 redux같은 전역 상태관리 라이브러리를 대체할 수 있을까","date":"2021-08-21T18:05:04+09:00","tags":["React Query","Redux"],"excerpt":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-query\"), \"\\uB294 \\uC804\\uC5ED \\uC0C1\\uD0DC\\uAD00\\uB9AC \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC\\uAC00 \\uC544\\uB2C8\\uB77C \\uC11C\\uBC84\\uC640 \\uD074\\uB77C\\uC774\\uC5B8\\uD2B8 \\uAC04\\uC758 \\uBE44\\uB3D9\\uAE30 \\uC791\\uC5C5\\uC744 \\uC27D\\uAC8C \\uD574\\uC8FC\\uB294 \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"`react-query`는 전역 상태관리 라이브러리가 아니라 서버와 클라이언트 간의 비동기 작업을 쉽게 해주는 라이브러리다."}}},{"slug":"2021-08-21-context-api-redux","excerpt":"context api는 글로벌 상태관리 라이브러리를 대체할 수 없고, 여전히 많은 리액트 개발자들이 redux, mobx 등을 사용하고 있다.","frontmatter":{"title":"Context API가 존재하지만 여전히 사람들이 redux와 전역 상태관리 라이브러리를 쓰는 이유","date":"2021-08-21T16:31:55+09:00","tags":["Jotai","React","Recoil","context API","Redux"],"excerpt":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"context api\\uB294 \\uAE00\\uB85C\\uBC8C \\uC0C1\\uD0DC\\uAD00\\uB9AC \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC\\uB97C \\uB300\\uCCB4\\uD560 \\uC218 \\uC5C6\\uACE0, \\uC5EC\\uC804\\uD788 \\uB9CE\\uC740 \\uB9AC\\uC561\\uD2B8 \\uAC1C\\uBC1C\\uC790\\uB4E4\\uC774 redux, mobx \\uB4F1\\uC744 \\uC0AC\\uC6A9\\uD558\\uACE0 \\uC788\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"context api는 글로벌 상태관리 라이브러리를 대체할 수 없고, 여전히 많은 리액트 개발자들이 redux, mobx 등을 사용하고 있다."}}},{"slug":"2021-08-15-testing-library","excerpt":"요점은 사용자 관점에서 테스트를 작성하자는 것이다.","frontmatter":{"title":"testing-library 사용팁","date":"2021-08-15T12:29:37+09:00","tags":["test","Testing Library"],"excerpt":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uC694\\uC810\\uC740 \\uC0AC\\uC6A9\\uC790 \\uAD00\\uC810\\uC5D0\\uC11C \\uD14C\\uC2A4\\uD2B8\\uB97C \\uC791\\uC131\\uD558\\uC790\\uB294 \\uAC83\\uC774\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"요점은 사용자 관점에서 테스트를 작성하자는 것이다."}}},{"slug":"2021-08-09-scroll-event-raf-throttle","excerpt":"스크롤 이벤트는 브라우저가 스크롤 위치 변경을 렌더링 할때마다 트리거 되는 것이여서 자체적으로 rAF가 제공해주는것과 동일한 결과를 갖는다.","frontmatter":{"title":"scroll event에 rAF throttle을 적용해야할까","date":"2021-08-09T10:44:54+09:00","tags":["Performance","throttle"],"excerpt":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uC2A4\\uD06C\\uB864 \\uC774\\uBCA4\\uD2B8\\uB294 \\uBE0C\\uB77C\\uC6B0\\uC800\\uAC00 \\uC2A4\\uD06C\\uB864 \\uC704\\uCE58 \\uBCC0\\uACBD\\uC744 \\uB80C\\uB354\\uB9C1 \\uD560\\uB54C\\uB9C8\\uB2E4 \\uD2B8\\uB9AC\\uAC70 \\uB418\\uB294 \\uAC83\\uC774\\uC5EC\\uC11C \\uC790\\uCCB4\\uC801\\uC73C\\uB85C rAF\\uAC00 \\uC81C\\uACF5\\uD574\\uC8FC\\uB294\\uAC83\\uACFC \\uB3D9\\uC77C\\uD55C \\uACB0\\uACFC\\uB97C \\uAC16\\uB294\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"스크롤 이벤트는 브라우저가 스크롤 위치 변경을 렌더링 할때마다 트리거 되는 것이여서 자체적으로 rAF가 제공해주는것과 동일한 결과를 갖는다."}}},{"slug":"2021-05-26-webpack-vite","excerpt":"이런 제목을 어디서 본 것 같은데? 라고 생각한다면 정상이다.","frontmatter":{"title":"Webpack 보다 더 빠른 빌드툴, Vite","date":"2021-05-26T21:45:47+09:00","tags":["esbuild","Vite"],"excerpt":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uC774\\uB7F0 \\uC81C\\uBAA9\\uC744 \\uC5B4\\uB514\\uC11C \\uBCF8 \\uAC83 \\uAC19\\uC740\\uB370? \\uB77C\\uACE0 \\uC0DD\\uAC01\\uD55C\\uB2E4\\uBA74 \\uC815\\uC0C1\\uC774\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"이런 제목을 어디서 본 것 같은데? 라고 생각한다면 정상이다."}}}],"pageInfo":{"currentPage":1,"hasNextPage":true,"hasPreviousPage":false,"itemCount":10,"pageCount":4,"perPage":10,"totalCount":31}}},"pageContext":{"limit":10,"skip":0}},
    "staticQueryHashes": ["1957264973","5457840"]}