{
    "componentChunkName": "component---src-templates-post-list-template-tsx",
    "path": "/page/2",
    "result": {"data":{"allMarkdownRemark":{"nodes":[{"slug":"/post/2021-08-26-usememo","excerpt":"공식 설명에도 computeExpensiveValue라고 설명하고 있다. 즉 비싼 연산을 언급하는 것이다. 예를 들면 데이터 만개를 변경한다던가... a === b는 전혀 비싼 연산이 아니다! 이 경우, 메모하는 메모리 비용에다가 [a, b]로 들어간 디펜던시에서 리…","frontmatter":{"title":"간단한 연산에 useMemo 쓰지 말자","date":"2021-08-26T11:15:48+09:00","tags":["useMemo"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"공식 설명에도 computeExpensiveValue라고 설명하고 있다. 즉 비싼 연산을 언급하는 것이다. "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"a === b"}]},{"type":"text","value":"는 비싼 연산이 아니다!"}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-08-21-react-query-redux","excerpt":"react-query는 서버 상태를 다루는 라이브러리다. redux, mobx 등은 클라이언트 상태를 다루는 라이브러리다. 즉, react-query는 전역 상태관리 라이브러리가 아니라 서버와 클라이언트 간의 비동기 작업을 쉽게 해주는 라이브러리다. 다만 react-…","frontmatter":{"title":"react-query가 redux같은 전역 상태관리 라이브러리를 대체할 수 있을까","date":"2021-08-21T18:05:04+09:00","tags":["React Query","Redux"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"react-query"}]},{"type":"text","value":"는 전역 상태관리 라이브러리가 아니라 서버와 클라이언트 간의 비동기 작업을 쉽게 해주는 라이브러리다."}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-08-21-context-api-redux","excerpt":"전역(global) 상태관리 옛날옛적 호랑이 담배피던시절(?) 리액트의 러닝커브를 올리는 주범은 redux라고 해도 과언이 아닐 정도로 리덕스는 리액트를 개발하려면 react-router-dom과 함께 필수로 배워야 하는 서드파티 라이브러리였으며 보일러 플레이트 코드…","frontmatter":{"title":"Context API가 존재하지만 여전히 사람들이 redux와 전역 상태관리 라이브러리를 쓰는 이유","date":"2021-08-21T16:31:55+09:00","tags":["Jotai","React","Recoil","context API","Redux"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"context api는 글로벌 상태관리 라이브러리를 대체할 수 없고, 여전히 많은 리액트 개발자들이 redux, mobx 등을 사용하고 있다."}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-08-15-testing-library","excerpt":"리액트로 개발하다보면 테스트는 거의 jest + testing-library 조합을 깔고 가는 듯 하다. CRA도 이 조합으로 기본적으로 세팅되어서 나온다. 가장 최근 State of JS 테스팅 툴 부문에서도 testing-library가 만족도 랭킹 1위를 기록했…","frontmatter":{"title":"testing-library 사용팁","date":"2021-08-15T12:29:37+09:00","tags":["test","Testing Library"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"요점은 사용자 관점에서 테스트를 작성하자는 것이다."}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-08-09-scroll-event-raf-throttle","excerpt":"프론트엔드 개발할때 가장 많이 사용하는 최적화 방법 중 하나가 쓰로틀링 / 디바운싱이다. throttle과 debounce는 자주 실행되는 함수들의 실행빈도를 줄여서 성능을 개선할 수 있다. throttle의 경우 함수 실행을 지연시켜서 실행 횟수를 줄이면서 지정한 …","frontmatter":{"title":"scroll event에 rAF throttle을 적용해야할까","date":"2021-08-09T10:44:54+09:00","tags":["Performance","throttle"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"스크롤 이벤트는 브라우저가 스크롤 위치 변경을 렌더링 할때마다 트리거 되는 것이여서 자체적으로 rAF가 제공해주는것과 동일한 결과를 갖는다."}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-05-26-webpack-vite","excerpt":"이런 제목을 어디서 본 것 같은데? 라고 생각한다면 정상이다. https://yrnana.dev/post/2021-02-11-webpack-snowpack Webpack 보다 더 빠른 빌드툴, Snowpack Vite는 Snowpack과 아주 유사한 컨셉의 프론트엔드…","frontmatter":{"title":"Webpack 보다 더 빠른 빌드툴, Vite","date":"2021-05-26T21:45:47+09:00","tags":["esbuild","Vite"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이런 제목을 어디서 본 것 같은데? 라고 생각한다면 정상이다."}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-04-16-useimperativehandle-forwardedref","excerpt":"useImperativeHandle와 forwardedRef를 활용하면 부모 컴포넌트가 자식 컴포넌트의 함수를 호출하거나 값을 가져올 수 있다.","frontmatter":{"title":"useImperativeHandle & forwardedRef 활용하기","date":"2021-04-16T21:49:11+09:00","tags":null,"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useImperativeHandle"}]},{"type":"text","value":"와 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forwardedRef"}]},{"type":"text","value":"를 활용하면 부모 컴포넌트가 자식 컴포넌트의 함수를 호출하거나 값을 가져올 수 있다."}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-04-10-react-query-staletime-cachetime","excerpt":"React Query의 라이프 사이클 A 쿼리 인스턴스가 mount 됨 네트워크에서 데이터 fetch 하고 A라는 query key로 캐싱함 이 데이터는 fresh 상태에서 staleTime(기본값 0) 이후 stale 상태로 변경됨 A 쿼리 인스턴스가 unmount…","frontmatter":{"title":"React Query에서 staleTime과 cacheTime의 차이","date":"2021-04-10T12:33:59+09:00","tags":["React Query"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"React Query의 lifecycle과 staleTime / cacheTime의 차이에 대해 이해하기"}]}],"data":{"quirksMode":false}}}},{"slug":"/post/2021-03-26","excerpt":"react vs vue vs angular vue 허접이 깝치지마라:-) https://www.npmtrends.com/react-vs-vue-vs-@angular/core ui library 의외로 material-ui가 월등하다. (antd랑 비슷한줄) https…","frontmatter":{"title":"비슷한 라이브러리 비교해보는 글","date":"2021-03-26T01:07:55+09:00","tags":["library"],"excerptAst":null}},{"slug":"/post/2021-03-25-offsettop-reflow","excerpt":"What forces layout / reflow 라는 문서를 보는데 Getting box metrics 즉 offsetTop, getBoundingClientRect() 등을 호출하는 api도 적혀 있었다. 아니 이게 무슨 소리야...내가 reflow를 마구 발생시…","frontmatter":{"title":"OffsetTop을 읽으면 reflow가 발생한다?","date":"2021-03-25T20:38:50+09:00","tags":["Browser","reflow"],"excerptAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"offsetTop"}]},{"type":"text","value":"을 읽는 것 자체가 무조건 reflow를 발생시키지는 않는다. 하지만 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"offsetTop"}]},{"type":"text","value":"을 읽기 위해서 브라우저가 렌더링 큐에 쌓인 모든 작업을 수행하면서 reflow를 발생시킬 수 있다."}]}],"data":{"quirksMode":false}}}}],"pageInfo":{"currentPage":2,"pageCount":4,"hasNextPage":true,"hasPreviousPage":true}}},"pageContext":{"limit":10,"skip":10}},
    "staticQueryHashes": ["1957264973","5457840"]}